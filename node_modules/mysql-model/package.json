{
  "author": {
    "name": "Michal Kowalkowski",
    "email": "kowalkowski.michal@gmail.com"
  },
  "name": "mysql-model",
  "version": "0.0.2",
  "description": "A backbone based model for communicating with a MySQL database using felixge/node-mysql.",
  "main": "./mysql-model.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/michalkow/node-mysql-model"
  },
  "keywords": [
    "node",
    "mysql",
    "model",
    "models",
    "orm",
    "backbone",
    "node-mysql",
    "database"
  ],
  "devDependencies": {
    "backbone": "0.9.2",
    "mysql": "2.0.0-alpha3",
    "underscore": "1.4.2"
  },
  "license": "MIT",
  "readme": "node-mysql-model\n========\nA [backbone](http://backbonejs.org) based model for communicating with a MySQL database using [felixge/node-mysql](https://github.com/felixge/node-mysql).\n\nInstall\n--------\n\nInstall from npm package:\n\n```bash\nnpm install mysql-model\n```\n\nOr install from git:\n\n```bash\nnpm install git://github.com/michalkow/node-mysql-model.git\n```\n\nUsage\n--------\n\nAdd the mysql-model module to your application :\n\n```javascript\nvar mysqlModel = require('mysql-model');\n```\n  \t\t\t\nThen create a model that will be main one for your application (all others will extend it):\n\n```javascript\nvar MyAppModel = mysqlModel.createConnection({\n  host     : 'database-host',\n  user     : 'database-user',\n  password : 'database-password',\n  database : 'database-name',\n});\n\nvar Movie = MyAppModel.extend({\n\ttableName: \"movies\",\n});\n\nmovie = new Movie();\n\n// OR\n\nmovie = new MyAppModel({tableName: \"movies\"});\n```\t\t\n\t\nTo see complete list of options for creating a connection with the database visit [felixge/node-mysql](https://github.com/felixge/node-mysql#connection-options) readme. \t\n\nAPI\n--------\n**Model Settable Options**\n\n>tableName\n\nName of a MySQL table the model will refer to:\n\n```javascript\nvar Movie = MyAppModel.extend({\n\ttableName: \"movies\",\n});\n```\t\n\n**Methods**\n\n> find\n\n\n*Retrieves records from database*\n\nUsage:\n\n```javascript\nmovie.find();\nmovie.find(method);\nmovie.find(callback);\nmovie.find(method, conditions);\nmovie.find(method, callback);\nmovie.find(method, conditions, callback);\n```\t\t\nParameters:\n\n- *string* **method**: uses one of find methods\n- *object* **conditions**: set find conditions\n- *function* **callback**: returns errors and results\n\nExample:\n\n```javascript\nmovie.find('all', {where: \"year > 2001\"}, function(err, rows, fields) {\n\t// Do something...\n});\n```\t\t\n\n> save\n\n*Saves your model to database*\n\nUsage:\n\n```javascript\nmovie.save();\nmovie.save(where);\nmovie.save(callback);\nmovie.save(where, callback);\n```\t\nParameters:\n\n- *string* **where**: set condition for WHERE\n- *function* **callback**: returns errors and results\n\nExample:\n\n```javascript\nmovie = new Movie({\n\tname: 'Serenity',\n\tdirector: 'Joss Whedon',\n\tlanguage: 'English',\n\tyear: 2005\n});\n// Will create new record\nmovie.save();\nmovie.set('id', 4);\n// Will update record if id exists\nmovie.save();\n```\t\t\n\n> remove\n\n*Deletes your model from database and unsets it*\n\nUsage:\n\n```javascript\nmovie.remove();\nmovie.remove(where);\nmovie.remove(callback);\nmovie.remove(where, callback);\n```\t\nParameters:\n\n- *string* **where**: set condition for WHERE\n- *function* **callback**: returns errors and results\n\nExample:\n\n```javascript\n// Will delete record from database matching id model\nmovie.set('id', 8);\nmovie.remove();\n// Will delete records from database matching where condition\nmovie.remove('year < 1980');\n```\t\n\n> read\n\n*Retrieves record from database and set it to current model*\n\nUsage:\n\n```javascript\nmovie.read();\nmovie.read(id);\nmovie.read(callback);\nmovie.read(id, callback);\n```\t\n\nParameters:\n\n- *integer* **id**: Id of record to read\n- *function* **callback**: returns errors and results\n\nExample:\n\n```javascript\nmovie.set('id', 6);\nmovie.read();\n// or\nmovie.read(6);\n```\t\n\n> query\n\n*Runs custom query*\n\nUsage:\n\n```javascript\nmovie.query(query);\nmovie.query(query, callback);\n```\t\nParameters:\n\n- *string* **query**: Your custom sql query to run \n- *function* **callback**: returns errors and results\n\nExample:\n\n```javascript\nmovie.query(\"SELECT name FROM movies WHERE director = 'James Cameron' ORDER BY year\", function(err, rows, fields) {\n\t// Do something...\n});\n```\t\n\n> setSQL\n\n*Method to replace 'set', when setting results passed back by node-mysql*\n\nUsage:\n\n```javascript\nmovie.setSQL(result);\n```\t\nParameters:\n\n- *object* **result**: Results passed back by find or read\n\nExample:\n\n```javascript\nmovie.find('first', {where: \"id=12\"}, function(err, row) {\n\tmovie.setSQL(row);\n});\n```\t\n\n**'find' methods**\n\n> 'all'\n\n*Returns all the records matching conditions*\n\nReturns:\n\n- array\n\nExample:\n\n```javascript\nmovie.find('all', {where: \"language = 'German'\", limit: [0, 30]}, function(err, rows) {\n\tfor(var i=0; i<rows.length; i++) {\n\t\tconsole.log(rows[i]);\n\t}\n});\n```\t\n\n> 'count'\n\n*Returns number of records matching conditions*\n\nReturns:\n\n- integer\n\nExample:\n\n```javascript\nmovie.find('count', {where: \"year = 2012\"}, function(err, result) {\n\t\tconsole.log(result);\n});\n```\t\n\n> 'first'\n\n*Returns first the records matching conditions*\n\nReturns:\n\n- object (hash)\n\nExample:\n\n```javascript\nmovie.find('first', {where: \"id = 3\"}, function(err, row) {\n\t\tconsole.log(row);\n});\n```\t\n \n> 'field'\n\n*Returns field of the first record matching conditions*\n\nReturns:\n\n- depends on field type\n\nExample:\n\n```javascript\nmovie.find('field', {fields: ['name'], where: \"id = 3\"}, function(err, field) {\n\t\tconsole.log(field);\n});\n```\t\n\n**'find' conditions**\n\n> fields\n\n*Fields to select from the table*\n\nAccepts:\n\n- array\n- string\n\nExample:\n\n```javascript\nmovie.find('all', {fields: ['id', 'name', 'year']});\n// SELECT id, name, year FROM movies\nmovie.find('all', {fields: \"name\"});\n// SELECT name FROM movies\n```\t\n\n> where\n\n*Operators for MySQL WHERE clause.*\n\nAccepts:\n\n- string\n\nExample:\n\n```javascript\nmovie.find('all', {where: \"year > 1987\"});\n// SELECT * FROM movies WHERE year > 1987\n```\t\n\n> group\n\n*Operators for MySQL GROUP BY clause.*\n\nAccepts:\n\n- array\n- string\n\nExample:\n\n```javascript\nmovie.find('all', {group: ['year', 'name']});\n// SELECT * FROM movies GROUP BY year, name\nmovie.find('all', {group: \"name\"});\n// SELECT * FROM movies GROUP BY name\n```\t\n\n> groupDESC\n\n*If true, sets descending order for GROUP BY*\n\nAccepts:\n\n- boolean\n\nExample:\n\n```javascript\nmovie.find('all', {group: ['year', 'name'], groupDESC:true});\n// SELECT * FROM movies GROUP BY year, name DESC\n```\t\n\n> having\n\n*Operators for MySQL HAVING clause.*\n\nAccepts:\n\n- string\n\nExample:\n\n```javascript\nmovie.find('all', {fields: ['name', 'COUNT(name)'], group: \"name\", having: \"COUNT(name) = 1\"});\n// SELECT name, COUNT(name) FROM movies GROUP BY name HAVING COUNT(name) = 1\n```\n\n> order\n\n*Operators for MySQL ORDER BY clause.*\n\nAccepts:\n\n- array\n- string\n\nExample:\n\n```javascript\nmovie.find('all', {group: ['year', 'name']});\n// SELECT * FROM movies ORDER BY year, name\nmovie.find('all', {group: \"name\"});\n// SELECT * FROM movies ORDER BY name\n```\t\n\n> orderDESC\n\n*If true, sets descending order for ORDER BY*\n\nAccepts:\n\n- boolean\n\nExample:\n\n```javascript\nmovie.find('all', {group: ['year', 'name'], orderDESC:true});\n// SELECT * FROM movies ORDER BY year, name DESC\n```\t\n\n> limit\n\n*Operators for MySQL LIMIT clause.*\n\nAccepts:\n\n- array\n- string\n\nExample:\n\n```javascript\nmovie.find('all', {limit: [0, 30]});\n// SELECT * FROM movies LIMIT 0, 30\nmovie.find('all', {limit: \"10, 40\"});\n// SELECT * FROM movies LIMIT 10, 40\n```\t\n\nTodo\n-------\n- validation\n- relations\n\t\t\t\t\nLicense\n-------\nnode-mysql-model is released under [MIT license](http://opensource.org/licenses/mit-license.php).\n\nCredits\n-------\nnode-mysql-model was created by [Micha≈Ç Kowalkowski](https://github.com/michalkow). You can contact me at [kowalkowski.michal@gmail.com](mailto:kowalkowski.michal@gmail.com)\n",
  "readmeFilename": "README.md",
  "_id": "mysql-model@0.0.2",
  "dist": {
    "shasum": "dc843fe056a79b9b1bda6b5703faa6ad96e64dfd"
  },
  "_resolved": "git://github.com/michalkow/node-mysql-model.git#5a7ba43b985eebc3bd9bf4189d6c4df348565724",
  "_from": "git://github.com/michalkow/node-mysql-model.git"
}
